{"version":3,"sources":["components/form.js","components/items.js","components/list.js","components/alert.js","App.js","serviceWorker.js","index.js"],"names":["Form","cost","amount","handleCost","handleAmount","handleEnter","edit","onSubmit","className","htmlFor","type","id","name","value","onChange","placeholder","Item","expense","handleEditItems","handleDeleteItems","aria-label","onClick","List","expenses","clearItems","map","key","length","Alert","text","initialExpenses","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCost","setAmount","show","alert","setAlert","setEdit","editItem","setEditItem","useEffect","setItem","stringify","handleAlert","setTimeout","e","target","preventDefault","tExpenses","item","oneExpense","uuid","changeExpenses","filter","find","reduce","accum","current","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db188056.chunk.js","sourcesContent":["import React from 'react';\nimport { FiSend } from \"react-icons/fi\";\n\nconst Form = ({cost, amount, handleCost, handleAmount, handleEnter, edit}) => {\n    return (\n        <form onSubmit={handleEnter}>\n            <div className=\"middle-form\">\n                <div className=\"form-all\">\n                    <label htmlFor=\"cost\">create: </label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"cost\"\n                        name=\"cost\"\n                        value={cost}\n                        onChange={handleCost}\n                        placeholder = \"ex., food for minotaur\"\n\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"amount\">amount $</label>\n                    <input\n                        type=\"number\"\n                        className=\"form-control\"\n                        id=\"amount\"\n                        name=\"amount\"\n                        value={amount}\n                        onChange={handleAmount}\n                        placeholder= \"how much?\"\n                            />\n                </div>\n            </div>\n            <button type=\"submit\" className=\"button\">\n                {edit? \"edit\" : \"submit\"}\n                <FiSend className=\"button-icon\" />\n            </button>\n        </form>\n    );\n}\n\nexport default Form;","import React from 'react';\nimport {FiEdit, FiTrash2} from 'react-icons/fi';\n\nconst Item = ({ expense, handleEditItems, handleDeleteItems }) => {\n    const { id, cost, amount } = expense\n    return <li className=\"item\">\n        <hr />\n        <div className=\"info\">\n            <span className=\"expense\">{cost}</span>\n            <span className=\"amount\">${amount}</span>\n        </div>\n        <div>\n            <button\n                className=\"Edit-button\"\n                aria-label=\"Edit\"\n                onClick={() => handleEditItems(id)}\n                >\n            <FiEdit />\n            </button>\n            <button\n                className=\"clear-button\"\n                aria-label=\"Remove\"\n                onClick={() => handleDeleteItems(id)}\n                >\n            <FiTrash2 />\n            </button>\n        </div>\n    </li>\n}\n\nexport default Item;","import React from 'react';\nimport Item from './items';\nimport {FiTrash2} from 'react-icons/fi';\n\nconst List = ({ expenses, handleEditItems, handleDeleteItems, clearItems }) => {\n    return (\n        <>\n            <ul className=\"list\">\n                {expenses.map((expense) => {\n                    return <Item key={expense.id} expense={expense}\n                    handleDeleteItems={handleDeleteItems}\n                    handleEditItems={handleEditItems}\n                    />\n            })}\n            </ul>\n            {expenses.length > 0 && (\n                <button className=\"button-trash\" onClick={clearItems}>\n                clear!\n                <FiTrash2 className=\"button-trash-icon\" />\n                </button>\n            )}\n        </>\n    );\n}\n\nexport default List;","import React from 'react';\n\n\nconst Alert = ({ type, text }) => {\n    return (\n        <div className=\"alert\">\n            {text}\n\n        </div>\n    );\n}\n\nexport default Alert;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Form from './components/form';\nimport List from './components/list';\nimport Alert from './components/alert';\nimport uuid from 'uuid/v4';\n\n/*\nconst initialExpenses = [\n  { id: uuid(), cost: \"Electrical\", amount: 525 },\n  { id: uuid(), cost: \"Water\", amount: 340 },\n  { id: uuid(), cost: \"Mortgage\", amount: 2200 }\n];\n*/\n\nconst initialExpenses = localStorage.getItem(\"expenses\")\n    ? JSON.parse(localStorage.getItem(\"expenses\"))\n    : [];\n\nfunction App() {\n  // States\n  const [expenses, setExpenses] = useState(initialExpenses);\n  const [cost, setCost] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [alert, setAlert] = useState({show:false});\n  //edit\n  const [edit, setEdit] = useState(false);\n  //edit item\n  const [editItem, setEditItem] = useState(0);\n  //useEffect\n  useEffect(() => {\n    localStorage.setItem(\"expenses\", JSON.stringify(expenses));\n  }, [expenses]);\n\n  const handleCost = e => {\n    setCost(e.target.value)\n  };\n  const handleAmount = e => {\n    setAmount(e.target.value)\n  };\n  const handleAlert = ({type, text}) => {\n    setAlert({show:true, type, text});\n    setTimeout(() => {\n      setAlert({show:false});\n    }, 4000);\n  };\n\n  //alert\n  const handleEnter = e => {\n    e.preventDefault();\n    if (cost !== \"\" && amount > 0) {\n      if (edit) {\n        let tExpenses = expenses.map(item => {\n          return item.id === editItem ? { ...item, cost, amount }\n            : item;\n        });\n        setExpenses(tExpenses);\n        setEdit(false);\n        handleAlert({ text: `${cost} successfully changed` });\n      } else {\n        const oneExpense = { id: uuid(), cost, amount };\n        setExpenses([...expenses, oneExpense]);\n        handleAlert({text: `${cost} added!`});\n      }\n      setCost(\"\");\n      setAmount(\"\");\n    } else {\n      handleAlert({text:`You need to add a category and amount!`});\n    }\n  };\n\n  //clear items\n  const clearItems = () => {\n    setExpenses([]);\n    handleAlert({ text: \"All items removed\" });\n  };\n\n  //delete items\n  const handleDeleteItems = id => {\n    let changeExpenses = expenses.filter(item => item.id !== id);\n    setExpenses(changeExpenses);\n    handleAlert({ text: \"Successfully removed\" });\n  };\n\n  //edit items\n  const handleEditItems = id => {\n    let expense = expenses.find(item => item.id === id);\n    let {cost, amount} = expense;\n    setCost(cost);\n    setAmount(amount);\n    setEdit(true);\n    setEditItem(id);\n  };\n\n  return (\n    <>\n      {alert.show && <Alert type={alert.type} text={alert.text} />}\n      <Alert />\n      <h1>budge.</h1>\n      <h3>plan your budget!</h3>\n      <div className=\"App\">\n        <Form\n          cost = {cost}\n          amount = {amount}\n          handleAmount = {handleAmount}\n          handleCost = {handleCost}\n          handleEnter = {handleEnter}\n          edit={edit}\n        />\n        <List expenses={expenses} handleDeleteItems=\n        {handleDeleteItems} handleEditItems={handleEditItems} clearItems={clearItems}\n        />\n      </div>\n      <h1>\n        total spend : <span className=\"total\">\n          $ {expenses.reduce((accum, current) => {\n            return (accum += parseInt(current.amount));\n          }, 0)}\n        </span>\n      </h1>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}